# Методы строк - часть 2
# Начало т окончание строки
# startswith и endswith


s = 'Cмотреть'

if s.lower().startswith('смо'):
    print('Да')

if s.endswith('еть'):
    print('Да')

# find('подстрока', 'start', 'end')
# возвращает первое вхождение искомой подстроки
# возвращает (-1) - значит не найдено

s = 'Смотреть, вертеть, видеть'

index = s.find('еть')  # с начала строки
print(index)

index = s.find('еть', 10)  # с позиции старт
print(index)
index = s.find('еть')
print(index)

s = 'синхрофазотрон'  # ищем 'о': сколько их и где находятся
ch = 'о'

if ch in s:
    count = s.count(ch)
    print(f'Буква \'{ch}\' встречается в слове "{s}" {count} раз(а).')
    print('Её позиция/позиции:', end=' ')
    start = 0
    for i in range(count):
        pos = s.find(ch, start)
        start = pos + 1
        print(pos, end=' ')
else:
    print(f'Буквы \'{ch}\' нет в слове "{s}".')

# replace ('что', 'на что', 'сколько раз')

s = '+7-012-345-67-89'  # нужно заменить -012- на (012)

print(s.replace('-', ' (', 1).replace('-', ') ', 1))

# slice - срез ( у строки и у других коллекций, кроме set)
# [начало:окончание:шаг]
# обращение по среду намного быстрее других циклов
# 1 и 0 можно не указывать

s = 'добрый день'

print(s[:6])  # от начала и до заданного индекса
print(s[7:])  # от текущего индекса до конца
print(s[3:8])  # от n до m (не включая)
print(s[::-1])  # инверсия

# проверка на палиндром
s = input('Введите слово: ').strip()

if s.lower() == s[::-1].lower():
    print(f'Строка "{s}" является палиндромом')
else:
    print(f'Строка "{s}" не является палиндромом')

# + и *  Миргород дорог... дорог...
s = 'Дорог Рим город или дорог Миргород'
new_symbols = '...'

print(s[26:] + (s[19:25] + new_symbols) * 2)

s = 'Дорог Рим'

temp = s.lower()
city = s[:5][::-1]
res = city + ' ' + temp[6:][::-1] + city

print(res.title())
